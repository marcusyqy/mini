#version 450
layout (local_size_x = 16, local_size_y = 16) in;
layout(rgba8,set = 0, binding = 0) uniform image2D image;

// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.

//push constants block
layout( push_constant ) uniform constants {
  vec4 data1;
  vec4 data2;
  vec4 data3;
  vec4 data4;
} push_constants;

// Return random noise in the range [0.0, 1.0], as a function of x.
float noise_2d(in vec2 x) {
  float xhash = cos(x.x * 37.0);
  float yhash = cos(x.y * 57.0);
  return fract(415.92653 * (xhash + yhash));
}

// Convert noise_2d() into a "star field" by stomping everthing below fThreshhold to zero.
float noisy_star_field(in vec2 sample_pos, float threshold) {
  float star_val = noise_2d(sample_pos);
  if (star_val >= threshold)
    star_val = pow((star_val - threshold)/(1.0 - threshold), 6.0);
  else
    star_val = 0.0;
  return star_val;
}

// Stabilize noisy_star_field() by only sampling at integer values.
float stable_star_field(in vec2 sample_pos, float threshold) {
  // Linear interpolation between four samples.
  // Note: This approach has some visual artifacts.
  // There must be a better way to "anti alias" the star field.
  float fract_x = fract(sample_pos.x);
  float fract_y = fract(sample_pos.y);
  vec2 floor_sample = floor(sample_pos);    
  float v1 = noisy_star_field(floor_sample, threshold);
  float v2 = noisy_star_field(floor_sample + vec2(0.0, 1.0), threshold);
  float v3 = noisy_star_field(floor_sample + vec2(1.0, 0.0), threshold);
  float v4 = noisy_star_field(floor_sample + vec2(1.0, 1.0), threshold);

  float star_val =  v1 * (1.0 - fract_x) * (1.0 - fract_y)
            + v2 * (1.0 - fract_x) * fract_y
            + v3 * fract_x * (1.0 - fract_y)
            + v4 * fract_x * fract_y;
	return star_val;
}

void main_image(out vec4 frag_color, in vec2 frag_coord, in vec2 resolution) {
  // Sky Background Color
  //vec3 color = vec3( 0.1, 0.2, 0.4 ) * frag_coord.y / resolution.y;
  vec3 color = push_constants.data1.xyz * frag_coord.y / resolution.y;

  // Note: Choose fThreshhold in the range [0.99, 0.9999].
  // Higher values (i.e., closer to one) yield a sparser starfield.
  float star_field_threshold = push_constants.data1.w; //0.97;

  // Stars with a slow crawl.
  float xrate = 0.2;
  float yrate = -0.06;
  vec2 sample_pos = frag_coord.xy + vec2(xrate * float(1), yrate * float(1));
	float star_val = stable_star_field(sample_pos, star_field_threshold);
  color += vec3(star_val);
	frag_color = vec4(color, 1.0);
}



void main() {
	vec4 value = vec4(0.0, 0.0, 0.0, 1.0);
  ivec2 texel_coord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(image);
  if(texel_coord.x < size.x && texel_coord.y < size.y) {
    vec4 color;
    main_image(color, texel_coord, size);
    imageStore(image, texel_coord, color);
  }   
}